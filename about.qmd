---
title: "Cheat Sheet"
format: html
---

```{r}
#| echo: false
knitr::opts_chunk$set(eval = FALSE)
```

# R Basics and Vectors

## Introduction
-   `getwd()`: Retrieves the current working directory path.
-   `install.packages("tidyverse")`: Installs the `tidyverse` package.
-   `install.packages("dslabs")`: Installs the `dslabs` package.
-   `library(tidyverse)`: Loads the `tidyverse` package, a collection of R packages designed for data science.
-   `library(dslabs)`: Loads the `dslabs` package, which contains datasets and functions for data science.
-   `library(ggplot2)`: Loads the `ggplot2` package for creating plots.
-   `data(murders)`: Loads the `murders` dataset available in the dslabs package.

## Vectors

### Creation and Naming

-   `c()`: Combines elements into a vector.
-   `names()`: Assigns names to vector elements for easier indexing.

```{r}
days <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
my_calories <- c(100, 120, 200, 150, 140)
names(my_calories) <- days # Assigns names to the elements in the `my_calories` vector
```

This code creates two vectors: one for days and one for calorie count. It then assigns the names of the days as labels for the calorie counts.

-   `my_vector <- c(1:10)`: Creates a vector containing a sequence from 1 to 10.

### Indexing

-   By position: `my_calories[1]` retrieves the first element.
-   By name: `my_calories["Monday"]` retrieves the element named "Monday".
-   By range: `my_calories[1:3]` retrieves the first three elements.

```{r}
first_three_days <- my_calories[1:3] # Selects the first three elements
my_calories_monday <- my_calories["Monday"] # Selects the element named "Monday"
```

This demonstrates how to retrieve specific elements from a vector, either by their position or by their assigned names.

-   `my_exp[c(1,3)]` or `my_exp[c("MON","WED")]`: Accessing multiple elements using numeric or named indices. Retrieves the first and third elements or retrieves the element named "MON" and "WED".

### Conditional Indexing

-   `my_calories[my_calories >= 150]` retrieves elements meeting the condition.

```{r}
my_good_days <- my_calories[my_calories >= 150] # Selects days with calorie counts of 150 or more
```

This is used to create a subset of `my_calories` where the condition (calories >= 150) is true.

### Vector Merging

The `c()` function is used again to merge two separate vectors into a single vector.

-   `my_friends_calories <- c(200, 130, 100, 170, 150)`
-   `all_calories <- c(my_calories, my_friends_calories)`: Combines two vectors into one.

### Some Vector Operations

-   `my_calories <- my_calories + 50`: Adding 50 to each element of `my_calories` vector.
-   `weekly_calories <- sum(my_calories)`: Summing all elements of `my_calories` to get `weekly_calories`, the total calories.


## Matrices

### Creation

-   `matrix()`: Creates a matrix from the provided vector.
-   `ncol`, `byrow`: Specifies the number of columns and whether to fill the matrix by rows.

-   `my_matrix <- matrix(1:9, ncol = 3)`: Constructs a 3x3 matrix with a sequence of numbers from 1 to 9.

### Naming

-   `rownames()`, `colnames()`: Assigns names to the rows and columns of a matrix.

```{r}
calories_matrix <- matrix(all_calories, ncol=2, byrow=FALSE)
rownames(calories_matrix) <- days # Sets the row names of the matrix.
colnames(calories_matrix) <- c("me", "my_friend") # Sets the column names of the matrix.
```

This code block shows how to convert a vector into a matrix and then assign row and column names for better readability.

### Matrices Operations 

Let's first create a matrix again.

-   `sw_matrix <- matrix(sw, nrow = 3, byrow = TRUE)`: #Creating a matrix `sw_matrix` from the `sw` vector, filling the matrix by rows.
-   `rownames(sw_matrix) <- titles`: #Setting row names of the matrix `sw_matrix`.
-   `colnames(sw_matrix) <- regions`: #Setting column names of the matrix `sw_matrix`.

Summation;

-   `colSums(sw_matrix)` and `rowSums(sw_matrix)`: #Calculating the sum of columns and rows in `sw_matrix`.
-   `sw_matrix2 <- cbind(sw_matrix, worldwide)`: #Binding a new column worldwide to the `sw_matrix` to form `sw_matrix2`.

Combining;

-   `sw2 <- matrix(box_office2, nrow = 3, byrow=TRUE)`: #Creating another matrix `sw2`.
-   `allsw <- rbind(sw_matrix, sw2)`: #Combining two matrices by rows, resulting in `allsw`.


## Factors

### Factor Creation

-   `as.factor()`: Converts a vector into a factor, useful for categorical data.
-   `levels`: Specifies the levels of the factor.

```{r}
categorical_vector <- c("Male", "Female", "Female")
categorical_vector_as_factor <- as.factor(categorical_vector, levels=c("Male", "Female"))
```

### Checking and converting types:

-   `class(a)` where a <- FALSE: Checking the class of a logical FALSE value.
-   `is.numeric(x)` and `is.character(x)`: Checking if a variable is numeric or character.
-   `as.numeric(c)*x` where `c <- "2"` and `x <- 2`: Converting a character to numeric and then multiplying by another numeric value.
  
### Working with Factors:

-   `is.factor(murders$region)`: Checks if the `region` column in the `murders` dataframe is a factor.
-   `factor_data <- factor(data)`: Converts the data vector into a factor.
-   `country_income_factor <- factor(country_income, ordered=TRUE, levels=c("low","middle","high"))`: Creates an ordered factor variable `country_income_factor` with specified levels indicating the ordering.



## Data Frames

### Creation

-   `my_df <- murders[1:10,]`: This line creates a new dataframe `my_df` that consists of the first 10 rows of the `murders` dataframe.

-   `df <- data.frame(c1, c2)`: This code creates a dataframe named `df` with columns `c1` and `c2` from the vectors provided.

-   `data.frame()`: Combines vectors into a data frame, columns must be of equal length.
-   `rownames()`: Assigns names to the rows of the data frame.

```{r}
my_data_frame <- data.frame(my_calories, my_friends_calories)
rownames(my_data_frame) <- days 
```

A data frame is created from two vectors and row names are assigned.

### Lists and Data Structures

-   `my_list <- list(my_vector, my_matrix, my_df)`: This creates a list `my_list` containing a vector, a matrix, and a dataframe.
-   `names(my_list) <- listnames`: Assigns names to the elements of the `my_list`.
-   `my_list$df`: Accesses the dataframe component named `df` in `my_list`.


### Indexing and Retrieval

-   `my_data_frame[1:3, 1]`: Indexes specific rows and columns.
-   `my_data_frame$my_calories`: Retrieves a column as a vector.

```{r}
my_data_frame_subset <- my_data_frame[1:3, 1] # Selects the first three rows of the first column
my_column <- my_data_frame$my_calories # Retrieves a single column from the data frame
```

Subsetting a data frame to retrieve specific rows/columns and accessing a single column as a vector.

-   `subset(murders, subset= state=="Alabama")`: Subsets the `murders` dataframe to include only rows where state is "Alabama".
-   `over20M <- subset(murders, subset= population > 20000000)`: Subsets the `murders` dataframe to include only rows where the population is greater than 20 million.


### Conditional Retrieval

-   `murders[murders$region == "South", ]`: Retrieves rows based on a condition.

```{r}
southern_states <- murders[murders$region == "South", ] # Retrieves rows where the region is 'South'
```

This code demonstrates how to subset a data frame based on a condition.

### Ordering and Sorting:

-   `order(murders$population)`: This function returns the indices of the `population` column in the `murders` dataframe in ascending order.
-   `murders[order(murders$population),]`: This command reorders the `murders` dataframe in ascending order based on the `population` column.
-   `murders[order(murders$population, decreasing = TRUE),]`: This variant of the order function sorts the `murders` dataframe in descending order based on the `population` column.


## ggplot for Data Visualization

### Plot Types

-   `geom_histogram()`: Creates a histogram.
-   `geom_point()`: Creates a scatter plot.
-   `geom_bar()`: Creates a bar plot.


```{r}
ggplot(murders) + aes(x=population) + geom_histogram() # Creates a histogram
ggplot(murders) + aes(x=population, y=total) + geom_point() # Creates a scatter plot
ggplot(murders) + aes(x=region) + geom_bar() # Creates a bar plot
```

Each line of code creates a different type of plot using the `ggplot2` package, one of the most powerful visualization packages in R.


### Enhancements

-   Labels and Colors: `geom_label()`, coloring by `color=region`.
-   Scaling: `scale_x_continuous()`, `scale_y_continuous()` for logarithmic transformations.

```{r}
ggplot(murders) + aes(x=population, y=total, label=abb, color=region) + geom_label()
ggplot(murders) + aes(x=population, y=total) + geom_point() +
    scale_x_continuous(trans="log10") + scale_y_continuous(trans="log10")
```

This code block illustrates how to add labels and colors to the points in a plot, and how to transform axes scales.

-   `ggplot(murders, aes(total)) + geom_histogram(binwidth = 20)`: Creates a histogram, but specifies a binwidth of 20, controlling the size of the bins used in the histogram.

-   Titles and Labels: `xlab()`, `ggtitle()` for custom labels and titles.

```{r}
ggplot(murders) + aes(x=population/1000000, y=total) + geom_point() + xlab("Population in millions") + ggtitle("Number of murders vs population in US states")
```

This line demonstrates how to label the axes and add a title to a plot for better understanding of the presented data.

### An Illustration on ggplot

Basic ggplot2 Plotting:

-   `ggplot(murders)`: Initializes a ggplot object with the `murders` dataset.
-   `class(p)`: Determines the class of the object `p`.
-   `View(p)`: Opens the RStudio viewer to display the object `p`, which would be a ggplot object.
-   `ggplot(murders, aes(x=population, y=total)) + geom_point()`: Creates a scatter plot of `total` vs `population` from the `murders` dataset.

Adding Labels and Colors:

```{r}
ggplot(murders, aes(population, total)) + geom_label(aes(population, total, label=abb)) # Adds labels to the plot, specified by the abb column in the `murders` dataset
ggplot(murders, aes(population, total)) + geom_label(aes(population, total, label=abb), color="blue") # Same as above but sets the label color to blue
```


```{r}
ggplot(murders, aes(population, total)) + geom_label(aes(population, total, label=abb, color=region)) # Adds labels and uses the region column to color-code them
```


Global Aesthetic Mappings:

```{r}
p <- ggplot(murders, aes(population, total, label=abb, color=region)) # Defines a global aesthetic mapping for the population, total, abb, and region which can be used with further layers added to the plot
```

```{r}
p + geom_label() # Adds label layers to the base plot `p`
p + geom_point(size=2, color="purple") + geom_text() # Adds both points and text layers to the plot, with specific aesthetic modifications
```


Scale Transformations and Titles:
```{r}
p + geom_point(size=2, color="purple") + geom_text() + scale_x_continuous(trans="log10") # Transforms the x-axis to a log10 scale while adding points and text layers
p + geom_point(size=2, color="purple") + geom_text() + scale_x_continuous(trans="log10") + scale_y_continuous(trans="log10") # Transforms both axes to log10 scales
```

```{r}
p + geom_point(size=2, color="purple") + geom_text() + scale_x_continuous(trans="log10") + scale_y_continuous(trans="log10") + ggtitle("Gun Murders and Population Size in US") # Adds a title to the plot
```

Modifying Labels and Axis Text:

```{r}
p + geom_point(size=2, color="purple") + geom_text() + scale_x_continuous(trans="log10") + scale_y_continuous(trans="log10") + ggtitle("Gun Murders and Population Size in US") + xlab("Population in millions (log scaled)") + ylab("Total gun murders (log scaled)") # Sets custom labels for the axes
```


Bar Plots and Coordinate Flipping:


```{r}
ggplot(murders, aes(state, total/population*1000)) + geom_col() # Creates a bar plot of states with the bars representing total murders per 1000 in population
ggplot(murders, aes(state, total/population*1000)) + geom_col() + coord_flip() # Same as above but with horizontal bars
```

```{r}
ggplot(murders, aes(reorder(state, total/population*1000), total/population*1000)) + geom_col() + coord_flip() # Reorders the states in the bar plot based on the murder rate, with horizontal bars
```


These codes represent the basics of using ggplot2 for creating different types of visualizations such as scatter plots and bar plots, including adding various layers, setting global aesthetics, scaling axes, and flipping coordinates. These are fundamental techniques when creating data visualizations in R with ggplot2.

### The Carat and Price Case

-   `smaller <- subset(diamonds, subset=carat <= 2.5)`: Creates a subset of the `diamonds` data where the `carat` size is less than or equal to 2.5.

-   `ggplot(smaller, aes(carat)) + geom_freqpoly(binwidth = 0.01)`: Plots a frequency polygon of the `carat` distribution for the `smaller` subset of `diamonds`, with a bin width of 0.01.

-   `ggplot(diamonds, aes(carat, price)) + geom_point()`: Creates a scatter plot showing the relationship between `carat` and `price`. There may be a positive correlation between the two variables, but this relationship may weaken with larger carats.

-   `ggplot(diamonds, aes(carat, price)) + geom_point() + facet_grid(.~cut)`: Generates a scatter plot of `carat` versus `price`, faceted by the cut of the diamonds. This allows the analysis to compare the relationship across different cuts, noting variations in the strength of the relationship.

-   `ggplot(diamonds, aes(carat, price, color=color)) + geom_point() + facet_grid(.~cut)`: Similar to the previous plot, but this time the points are colored based on the color of the diamonds. The plot explores how diamond color may influence price, indicating that diamonds with a more whitish color may command higher prices for the same size.


## Statistical Summaries

### Summary Functions

-   `summary()`: Provides a full summary of a variable.
-   `mean()`: Calculates the mean of a variable.
-   `tapply()`: Applies a function (like `summary`) over subsets of a vector, indexed by some other vector (like regions).

```{r}
summary(murders$population) # Provides a full summary statistics(min, 1st quartile, median, mean, 3rd quartile, and max) for the population column in murders dataset
mean(murders$population) # Calculates the mean of the population column.
```


```{r}
tapply(murders$population, murders$region, summary) # Applies the `summary` function to the `population` column within each `region`, providing statistical summaries for each region.
```

```{r}
tapply(murders$total, murders$region, mean) # Applies the `mean` function to the `total` column within each `region`, calculating the average number of murders by region.
tapply(murders$total, murders$region, summary) # Applies the `summary` function to the `total` column within each `region`, providing statistical summaries for each region.
```


These functions are used to calculate summary statistics for vectors and subsets of data within vectors.
