---
title: "Cheat Sheet"
format: html
---

```{r}
#| echo: false
knitr::opts_chunk$set(eval = FALSE)
```

# R Basics and Vectors

## Creation and Naming

-   `c()`: Combines elements into a vector.
-   `names()`: Assigns names to vector elements for easier indexing.

```{r}
days <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
my_calories <- c(100, 120, 200, 150, 140)
names(my_calories) <- days # Assigns names to the elements in the 'my_calories' vector
```

This code creates two vectors: one for days and one for calorie count. It then assigns the names of the days as labels for the calorie counts.

## Vector Operations

### Indexing

-   By position: `my_calories[1]` retrieves the first element.
-   By name: `my_calories["Monday"]` retrieves the element named "Monday".
-   By range: `my_calories[1:3]` retrieves the first three elements.

```{r}
first_three_days <- my_calories[1:3] # Selects the first three elements
my_calories_monday <- my_calories["Monday"] # Selects the element named "Monday"
```

This demonstrates how to retrieve specific elements from a vector, either by their position or by their assigned names.

### Conditional Indexing

-   `my_calories[my_calories >= 150]` retrieves elements meeting the condition.

```{r}
my_good_days <- my_calories[my_calories >= 150] # Selects days with calorie counts of 150 or more
```

This is used to create a subset of `my_calories` where the condition (calories >= 150) is true.

## Vector Merging

The `c()` function is used again to merge two separate vectors into a single vector.

-   `my_friends_calories <- c(200, 130, 100, 170, 150)`
-   `all_calories <- c(my_calories, my_friends_calories)`: Combines two vectors into one.

# Matrices

## Creation

-   `matrix()`: Creates a matrix from the provided vector.
-   `ncol`, `byrow`: Specifies the number of columns and whether to fill the matrix by rows.

## Naming

-   `rownames()`, `colnames()`: Assigns names to the rows and columns of a matrix.

```{r}
calories_matrix <- matrix(all_calories, ncol=2, byrow=FALSE)
rownames(calories_matrix) <- days # Sets the row names of the matrix
colnames(calories_matrix) <- c("me", "my_friend") # Sets the column names of the matrix
```

This code block shows how to convert a vector into a matrix and then assign row and column names for better readability.

# Factors

## Factor Creation

-   `as.factor()`: Converts a vector into a factor, useful for categorical data.
-   `levels`: Specifies the levels of the factor.

```{r}
categorical_vector <- c("Male", "Female", "Female")
categorical_vector_as_factor <- as.factor(categorical_vector, levels=c("Male", "Female"))
```

# Data Frames

## Creation

-   `data.frame()`: Combines vectors into a data frame, columns must be of equal length.
-   `rownames()`: Assigns names to the rows of the data frame.

```{r}
my_data_frame <- data.frame(my_calories, my_friends_calories)
rownames(my_data_frame) <- days 
```

A data frame is created from two vectors and row names are assigned.

## Indexing and Retrieval

-   `my_data_frame[1:3, 1]`: Indexes specific rows and columns.
-   `my_data_frame$my_calories`: Retrieves a column as a vector.

```{r}
my_data_frame_subset <- my_data_frame[1:3, 1] # Selects the first three rows of the first column
my_column <- my_data_frame$my_calories # Retrieves a single column from the data frame
```

Subsetting a data frame to retrieve specific rows/columns and accessing a single column as a vector.

## Conditional Retrieval

-   `murders[murders$region == "South", ]`: Retrieves rows based on a condition.

```{r}
southern_states <- murders[murders$region == "South", ] # Retrieves rows where the region is 'South'
```

This code demonstrates how to subset a data frame based on a condition.

# ggplot for Data Visualization

## Plot Types

-   `geom_histogram()`: Creates a histogram.
-   `geom_point()`: Creates a scatter plot.
-   `geom_bar()`: Creates a bar plot.


```{r}
ggplot(murders) + aes(x=population) + geom_histogram() # Creates a histogram
ggplot(murders) + aes(x=population, y=total) + geom_point() # Creates a scatter plot
ggplot(murders) + aes(x=region) + geom_bar() # Creates a bar plot
```

Each line of code creates a different type of plot using the `ggplot2` package, one of the most powerful visualization packages in R.

## Enhancements

-   Labels and Colors: `geom_label()`, coloring by `color=region`.
-   Scaling: `scale_x_continuous()`, `scale_y_continuous()` for logarithmic transformations.

```{r}
ggplot(murders) + aes(x=population, y=total, label=abb, color=region) + geom_label()
ggplot(murders) + aes(x=population, y=total) + geom_point() +
    scale_x_continuous(trans="log10") + scale_y_continuous(trans="log10")
```

This code block illustrates how to add labels and colors to the points in a plot, and how to transform axes scales.

-   Titles and Labels: `xlab()`, `ggtitle()` for custom labels and titles.

```{r}
ggplot(murders) + aes(x=population/1000000, y=total) + geom_point() + xlab("Population in millions") + ggtitle("Number of murders vs population in US states")
```

This line demonstrates how to label the axes and add a title to a plot for better understanding of the presented data.

# Statistical Summaries

## Summary Functions

-   `summary()`: Provides a full summary of a variable.
-   `mean()`: Calculates the mean of a variable.
-   `tapply()`: Applies a function (like `summary`) over subsets of a vector, indexed by some other vector (like regions).

```{r}
summary(murders$population) # Provides a full summary statistics for the population column
mean(murders$population) # Calculates the mean of the population column
tapply(murders$population, murders$region, summary) # Applies the summary function to subsets of population based on the region
```

These functions are used to calculate summary statistics for vectors and subsets of data within vectors.
